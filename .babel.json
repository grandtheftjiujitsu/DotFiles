{
  "{\"filename\":\"/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/gulpfile.babel.js\",\"env\":{\"development\":{\"plugins\":[]}},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"loose\":false,\"spec\":false}],[[],null],[[],null],[[],{\"spec\":false}],[[],null],[[],{\"loose\":false}],[[],null],[[],null],[[],null],[[],{\"loose\":false}],[[],{\"loose\":false}],[[],null],[[],null],[[],null],[[],{\"loose\":false}],[[],null],[[],{\"loose\":false}],[[],null],[[],null],[[],{\"loose\":false}],[[],{\"async\":false,\"asyncGenerators\":false}]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.26.3": {
    "metadata": {
      "usedHelpers": [
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "gulp",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "gulp"
              }
            ]
          },
          {
            "source": "child_process",
            "imported": [
              "spawn",
              "exec"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "spawn",
                "local": "spawn"
              },
              {
                "kind": "named",
                "imported": "exec",
                "local": "exec"
              }
            ]
          },
          {
            "source": "lodash",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "_"
              }
            ]
          },
          {
            "source": "gulp-babel",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "babel"
              }
            ]
          },
          {
            "source": "gulp-clean",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "clean"
              }
            ]
          },
          {
            "source": "gulp-concat",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "concat"
              }
            ]
          },
          {
            "source": "gulp-cssmin",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "cssmin"
              }
            ]
          },
          {
            "source": "gpmdp-electron-winstaller",
            "imported": [
              "createWindowsInstaller"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "createWindowsInstaller",
                "local": "electronInstaller"
              }
            ]
          },
          {
            "source": "fs",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "fs"
              }
            ]
          },
          {
            "source": "glob",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "globber"
              }
            ]
          },
          {
            "source": "gulp-header",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "header"
              }
            ]
          },
          {
            "source": "gulp-less",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "less"
              }
            ]
          },
          {
            "source": "electron-packager",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "packager"
              }
            ]
          },
          {
            "source": "path",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "nodePath"
              }
            ]
          },
          {
            "source": "gulp-replace",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "replace"
              }
            ]
          },
          {
            "source": "run-sequence",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "runSequence"
              }
            ]
          },
          {
            "source": "electron-windows-store",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "electronWindowsStore"
              }
            ]
          },
          {
            "source": "electron-rebuild",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "rebuild"
              }
            ]
          },
          {
            "source": "./vendor/svg_raster",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "rasterImages"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/gulpfile.babel.js",
      "filenameRelative": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/gulpfile.babel.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false,
            "spec": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "spec": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "async": false,
            "asyncGenerators": false
          }
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "gulpfile.babel.js",
      "sourceFileName": "gulpfile.babel.js",
      "sourceRoot": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "gulpfile.babel"
    },
    "ignored": false,
    "code": "'use strict';\n\nvar _gulp = require('gulp');\n\nvar _gulp2 = _interopRequireDefault(_gulp);\n\nvar _child_process = require('child_process');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _gulpBabel = require('gulp-babel');\n\nvar _gulpBabel2 = _interopRequireDefault(_gulpBabel);\n\nvar _gulpClean = require('gulp-clean');\n\nvar _gulpClean2 = _interopRequireDefault(_gulpClean);\n\nvar _gulpConcat = require('gulp-concat');\n\nvar _gulpConcat2 = _interopRequireDefault(_gulpConcat);\n\nvar _gulpCssmin = require('gulp-cssmin');\n\nvar _gulpCssmin2 = _interopRequireDefault(_gulpCssmin);\n\nvar _gpmdpElectronWinstaller = require('gpmdp-electron-winstaller');\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _gulpHeader = require('gulp-header');\n\nvar _gulpHeader2 = _interopRequireDefault(_gulpHeader);\n\nvar _gulpLess = require('gulp-less');\n\nvar _gulpLess2 = _interopRequireDefault(_gulpLess);\n\nvar _electronPackager = require('electron-packager');\n\nvar _electronPackager2 = _interopRequireDefault(_electronPackager);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _gulpReplace = require('gulp-replace');\n\nvar _gulpReplace2 = _interopRequireDefault(_gulpReplace);\n\nvar _runSequence = require('run-sequence');\n\nvar _runSequence2 = _interopRequireDefault(_runSequence);\n\nvar _electronWindowsStore = require('electron-windows-store');\n\nvar _electronWindowsStore2 = _interopRequireDefault(_electronWindowsStore);\n\nvar _electronRebuild = require('electron-rebuild');\n\nvar _electronRebuild2 = _interopRequireDefault(_electronRebuild);\n\nvar _svg_raster = require('./vendor/svg_raster');\n\nvar _svg_raster2 = _interopRequireDefault(_svg_raster);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import uglify from 'gulp-uglify';\nvar paths = {\n  internalScripts: ['src/**/*.js'],\n  html: 'src/public_html/**/*.html',\n  less: 'src/assets/less/**/*.less',\n  fonts: ['node_modules/materialize-css/dist/fonts/**/*', '!node_modules/materialize-css/dist/font/material-design-icons/*', 'node_modules/material-design-icons-iconfont/dist/fonts/**/*'],\n  images: ['src/assets/img/**/*', 'src/assets/icons/*'],\n  locales: ['src/_locales/*.json']\n}; /* eslint arrow-body-style: 0 */\n\nvar packageJSON = require('./package.json');\n\nvar version = packageJSON.dependencies.electron;\nif (version.substr(0, 1) !== '0' && version.substr(0, 1) !== '1' && version.substr(0, 1) !== '2') {\n  version = version.substr(1);\n}\n\nvar defaultPackageConf = {\n  appBundleId: packageJSON.name,\n  appCategoryType: 'public.app-category.music',\n  appCopyright: 'Copyright \\xA9 ' + new Date().getFullYear() + ' ' + packageJSON.author.name + ', All rights reserved.', // eslint-disable-line\n  appVersion: packageJSON.version,\n  afterCopy: [function (buildPath, electronVersion, pPlatform, pArch, done) {\n    return (0, _electronRebuild2.default)(buildPath, electronVersion, pArch).then(function () {\n      return done();\n    }).catch(done);\n  }, function (buildPath, electronVersion, pPlatform, pArch, done) {\n    var files = _glob2.default.sync(_path2.default.resolve(buildPath, '**', '*.pdb')).concat(_glob2.default.sync(_path2.default.resolve(buildPath, '**', '*.obj'))).concat(_glob2.default.sync(_path2.default.resolve(buildPath, '**', '.bin', '**', '*')));\n    files.forEach(function (filePath) {\n      return _fs2.default.unlinkSync(filePath);\n    });\n    done();\n  }],\n  arch: 'all',\n  asar: true,\n  buildVersion: packageJSON.version,\n  dir: __dirname,\n  icon: './build/assets/img/main',\n  ignore: function ignore(path) {\n    var tests = [\n    // Ignore git directory\n    function () {\n      return (/^\\/\\.git\\/.*/g\n      );\n    },\n    // Ignore uwp directory\n    function () {\n      return (/^\\/\\uwp\\/.*/g\n      );\n    },\n    // Ignore electron-packager on Docker machines\n    function () {\n      return (/^\\/electron-packager\\//g\n      );\n    },\n    // Ignore electron\n    function () {\n      return (/^\\/node_modules\\/electron\\//g\n      );\n    }, function () {\n      return (/^\\/node_modules\\/electron$/g\n      );\n    },\n    // Ignore debug files\n    function () {\n      return (/^\\/node_modules\\/.*\\.pdb/g\n      );\n    },\n    // Ignore native module obj files\n    function () {\n      return (/^\\/node_modules\\/.*\\.obj/g\n      );\n    },\n    // Ignore optional dev modules\n    function () {\n      return (/^\\/node_modules\\/appdmg/g\n      );\n    }, function () {\n      return (/^\\/node_modules\\/electron-installer-debian/g\n      );\n    }, function () {\n      return (/^\\/node_modules\\/electron-installer-redhat/g\n      );\n    },\n    // Ignore symlinks in the bin directory\n    function () {\n      return (/^\\/node_modules\\/.bin/g\n      );\n    },\n    // Ignore root dev FileDescription\n    function () {\n      return (/^\\/(vendor|dist|sig|docs|src|test|.cert.pfx|.editorconfig|.eslintignore|.eslintrc|.gitignore|.travis.yml|appveyor.yml|circle.yml|CONTRIBUTING.md|Gruntfile.js|gulpfile.js|ISSUE_TEMPLATE.md|LICENSE|README.md)(\\/|$)/g\n      );\n    }];\n    for (var i = 0; i < tests.length; i++) {\n      if (tests[i]().test(path)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  name: packageJSON.productName,\n  out: './dist/',\n  overwrite: true,\n  platform: 'all',\n  prune: true,\n  electronVersion: version,\n  win32metadata: {\n    CompanyName: packageJSON.author.name,\n    FileDescription: packageJSON.productName,\n    ProductName: packageJSON.productName,\n    InternalName: packageJSON.productName\n  }\n};\n\nvar winstallerConfig = {\n  appDirectory: 'dist/' + packageJSON.productName + '-win32-ia32',\n  outputDirectory: 'dist/installers/win32',\n  authors: packageJSON.author.name,\n  exe: packageJSON.productName + '.exe',\n  description: packageJSON.productName,\n  title: packageJSON.productName,\n  owners: packageJSON.author.name,\n  name: 'GPMDP_3',\n  noMsi: true,\n  certificateFile: '.cert.pfx',\n  certificatePassword: process.env.SIGN_CERT_PASS,\n  // DEV: When in master we should change this to point to github raw url\n  iconUrl: 'https://www.samuelattard.com/img/gpmdp_setup.ico',\n  setupIcon: 'build/assets/img/main.ico',\n  loadingGif: 'build/assets/img/installing.gif'\n};\n\nif (!process.env.GPMDP_DONT_BUILD_DELTAS) {\n  winstallerConfig.remoteReleases = 'https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-';\n}\n\nif (process.env.APPVEYOR) {\n  delete winstallerConfig.remoteReleases;\n}\n\nvar appdmgConf = {\n  target: 'dist/' + packageJSON.productName + '-darwin-x64/' + packageJSON.productName + '.dmg',\n  basepath: __dirname,\n  specification: {\n    title: 'GPMDP',\n    icon: defaultPackageConf.icon + '.icns',\n    background: 'src/assets/img/dmg.png',\n    window: {\n      size: {\n        width: 600,\n        height: 400\n      }\n    },\n    contents: [{\n      x: 490, y: 252, type: 'link', path: '/Applications'\n    }, {\n      x: 106, y: 252, type: 'file', path: 'dist/' + packageJSON.productName + '-darwin-x64/' + packageJSON.productName + '.app'\n    }]\n  }\n};\n\nvar cleanGlob = function cleanGlob(glob, allowSkip) {\n  if (allowSkip && process.env.GPMDP_SKIP_PACKAGE) return;\n  return function () {\n    return _gulp2.default.src(glob, { read: false }).pipe((0, _gulpClean2.default)({ force: true }));\n  };\n};\n\nvar windowsSignFile = function windowsSignFile(filePath, signDigest) {\n  return new Promise(function (resolve) {\n    console.log('Signing file: \"' + filePath + '\"\\nWith digest: ' + signDigest);\n    (0, _child_process.exec)('vendor\\\\signtool sign /f \".cert.pfx\" /p ' + process.env.SIGN_CERT_PASS + ' /td ' + signDigest + ' /fd ' + signDigest + ' /tr \"http://timestamp.digicert.com\" /v /as \"' + filePath + '\"', {}, function () {\n      setTimeout(function () {\n        setTimeout(resolve, 500);\n      });\n    });\n  });\n};\n\n_gulp2.default.task('clean', cleanGlob(['./build', './dist']));\n_gulp2.default.task('clean-dist-win', cleanGlob('./dist/' + packageJSON.productName + '-win32-ia32'));\n_gulp2.default.task('clean-dist-darwin', cleanGlob('./dist/' + packageJSON.productName + '-darwin-ia32'));\n_gulp2.default.task('clean-dist-linux-32', cleanGlob('./dist/' + packageJSON.productName + '-linux-ia32', true));\n_gulp2.default.task('clean-dist-linux-64', cleanGlob('./dist/' + packageJSON.productName + '-linux-x64', true));\n_gulp2.default.task('clean-html', cleanGlob('./build/public_html'));\n_gulp2.default.task('clean-internal', cleanGlob(['./build/*.js', './build/**/*.js', '!./build/assets/**/*']));\n_gulp2.default.task('clean-fonts', cleanGlob('./build/assets/fonts'));\n_gulp2.default.task('clean-less', cleanGlob('./build/assets/css'));\n_gulp2.default.task('clean-images', cleanGlob('./build/assets/img'));\n_gulp2.default.task('clean-locales', cleanGlob('./build/_locales/*.json'));\n\n_gulp2.default.task('html', ['clean-html'], function () {\n  return _gulp2.default.src(paths.html).pipe(_gulp2.default.dest('./build/public_html'));\n});\n\n_gulp2.default.task('transpile', ['clean-internal'], function () {\n  return _gulp2.default.src(paths.internalScripts).pipe((0, _gulpBabel2.default)()).on('error', function (err) {\n    console.error(err);\n  }) // eslint-disable-line\n  .pipe((0, _gulpReplace2.default)(/process\\.env\\.([a-zA-Z_]+)?( |,|;|\\))/gi, function (envCall, envKey, closer) {\n    return '\\'' + process.env[envKey] + '\\'' + closer;\n  })).pipe(_gulp2.default.dest('./build/'));\n});\n\n_gulp2.default.task('locales', ['clean-locales'], function () {\n  return _gulp2.default.src(paths.locales).pipe(_gulp2.default.dest('./build/_locales'));\n});\n\n_gulp2.default.task('fonts', ['clean-fonts'], function () {\n  return _gulp2.default.src(paths.fonts).pipe(_gulp2.default.dest('./build/assets/fonts'));\n});\n\n_gulp2.default.task('less', ['clean-less'], function () {\n  return _gulp2.default.src(paths.less).pipe((0, _gulpLess2.default)()).on('error', function (err) {\n    console.error(err);\n  }) // eslint-disable-line\n  .pipe((0, _gulpCssmin2.default)()).pipe((0, _gulpConcat2.default)('core.css')).pipe(_gulp2.default.dest('./build/assets/css'));\n});\n\n// Copy all static images\n_gulp2.default.task('copy-static-images', ['clean-images'], function () {\n  return _gulp2.default.src(paths.images).pipe(_gulp2.default.dest('./build/assets/img/'));\n});\n\n_gulp2.default.task('images', ['copy-static-images'], function (done) {\n  (0, _svg_raster2.default)(done);\n});\n\n_gulp2.default.task('build-release', ['build'], function () {\n  return _gulp2.default.src('./build/**/*.js')\n  // .pipe(uglify())\n  .pipe((0, _gulpHeader2.default)('/*!\\n' + packageJSON.productName + '\\nVersion: v' + packageJSON.version + '\\nAPI Version: v' + packageJSON.apiVersion + '\\nCompiled: ' + new Date().toUTCString() + '\\nCopyright (C) ' + new Date().getFullYear() + ' ' + packageJSON.author.name + '\\nThis software may be modified and distributed under the terms of the MIT license.\\n */\\n')).pipe(_gulp2.default.dest('./build'));\n});\n\n// Rerun the task when a file changes\n_gulp2.default.task('watch', ['build'], function () {\n  _gulp2.default.watch(paths.internalScripts, ['transpile']);\n  _gulp2.default.watch(paths.html, ['html']);\n  _gulp2.default.watch(paths.images, ['images']);\n  _gulp2.default.watch(paths.less, ['less']);\n  _gulp2.default.watch(paths.locales, ['locales']);\n});\n\n_gulp2.default.task('package:win', ['clean-dist-win', 'build-release'], function (done) {\n  (0, _electronPackager2.default)(_lodash2.default.extend({}, defaultPackageConf, { platform: 'win32', arch: 'ia32' }), function (err) {\n    if (err) return done(err);\n    setTimeout(function () {\n      var packageExePath = 'dist/' + packageJSON.productName + '-win32-ia32/' + packageJSON.productName + '.exe';\n      windowsSignFile(packageExePath, 'sha1').then(function () {\n        return windowsSignFile(packageExePath, 'sha256');\n      }).then(function () {\n        return done();\n      });\n    }, 1000);\n  });\n});\n\n_gulp2.default.task('make:win', ['package:win'], function (done) {\n  (0, _gpmdpElectronWinstaller.createWindowsInstaller)(winstallerConfig).then(function () {\n    var installerExePath = 'dist/installers/win32/' + packageJSON.productName + 'Setup.exe';\n    windowsSignFile(installerExePath, 'sha1').then(function () {\n      return windowsSignFile(installerExePath, 'sha256');\n    }).then(function () {\n      return done();\n    });\n  }).catch(function (err) {\n    return done(err);\n  });\n});\n\n_gulp2.default.task('make:win:uwp', ['package:win'], function (done) {\n  (0, _electronWindowsStore2.default)({\n    containerVirtualization: false,\n    inputDirectory: _path2.default.resolve(__dirname, 'dist/' + packageJSON.productName + '-win32-ia32'),\n    outputDirectory: _path2.default.resolve(__dirname, 'dist/uwp'),\n    flatten: true,\n    packageVersion: packageJSON.version + '.0',\n    packageName: 'GPMDP',\n    packageDisplayName: 'GPMDP',\n    packageDescription: packageJSON.description,\n    packageExecutable: 'app\\\\' + packageJSON.productName + '.exe',\n    publisher: 'CN=E800FCD7-1562-414E-A4AC-F1BA78F4A060',\n    publisherDisplayName: 'Samuel Attard',\n    assets: 'build\\\\assets\\\\img\\\\assets',\n    devCert: _path2.default.resolve(__dirname, '.uwp.pfx'),\n    signtoolParams: ['/p', process.env.SIGN_CERT_PASS],\n    finalSay: function finalSay() {\n      return new Promise(function (resolve) {\n        var manifestPath = _path2.default.resolve(__dirname, 'dist/uwp/pre-appx/appxmanifest.xml');\n        var manifest = _fs2.default.readFileSync(manifestPath, 'utf8').replace('<Identity Name=\"GPMDP\"', '<Identity Name=\"24619SamuelAttard.GPMDP\"');\n        _fs2.default.writeFileSync(manifestPath, manifest);\n        resolve();\n      });\n    }\n  }).then(function () {\n    return done();\n  }).catch(done);\n});\n\n_gulp2.default.task('package:darwin', ['clean-dist-darwin', 'build-release'], function (done) {\n  (0, _electronPackager2.default)(_lodash2.default.extend({}, defaultPackageConf, { platform: 'darwin', osxSign: { identity: 'Developer ID Application: Samuel Attard (S7WPQ45ZU2)' } }), done); // eslint-disable-line\n});\n\n_gulp2.default.task('make:darwin', ['package:darwin'], function (done) {\n  var pathEscapedName = packageJSON.productName.replace(/ /gi, ' ');\n  var child = (0, _child_process.spawn)('zip', ['-r', '-y', pathEscapedName + '.zip', pathEscapedName + '.app'], {\n    cwd: './dist/' + packageJSON.productName + '-darwin-x64'\n  });\n\n  console.log('Zipping \"' + packageJSON.productName + '.app\"'); // eslint-disable-line\n\n  child.stdout.on('data', function () {});\n\n  child.stderr.on('data', function () {});\n\n  child.on('close', function (code) {\n    console.log('Finished zipping with code ' + code); // eslint-disable-line\n\n    done();\n  });\n});\n\n_gulp2.default.task('dmg:darwin', ['package:darwin'], function (done) {\n  if (_fs2.default.existsSync(_path2.default.resolve(__dirname, appdmgConf.target))) {\n    _fs2.default.unlinkSync(_path2.default.resolve(__dirname, appdmgConf.target));\n  }\n  var dmg = require('appdmg')(appdmgConf);\n\n  dmg.on('finish', function () {\n    return done();\n  });\n  dmg.on('error', done);\n});\n\n_gulp2.default.task('package:linux:32', ['clean-dist-linux-32', 'build-release'], function (done) {\n  if (process.env.GPMDP_SKIP_PACKAGE) return done();\n  (0, _electronPackager2.default)(_lodash2.default.extend({}, defaultPackageConf, { platform: 'linux', arch: 'ia32' }), done);\n});\n\n_gulp2.default.task('package:linux:64', ['clean-dist-linux-64', 'build-release'], function (done) {\n  if (process.env.GPMDP_SKIP_PACKAGE) return done();\n  (0, _electronPackager2.default)(_lodash2.default.extend({}, defaultPackageConf, { platform: 'linux', arch: 'x64' }), done);\n});\n\n_gulp2.default.task('package:linux', function (done) {\n  (0, _runSequence2.default)('package:linux:32', 'package:linux:64', done);\n});\n\nvar generateGulpLinuxDistroTask = function generateGulpLinuxDistroTask(prefix, name, arch) {\n  _gulp2.default.task(prefix + ':linux:' + arch, ['package:linux:' + arch], function (done) {\n    var tool = require('electron-installer-' + name);\n\n    var defaults = {\n      bin: packageJSON.productName,\n      dest: 'dist/installers/' + name,\n      depends: ['libappindicator1', 'avahi-daemon'],\n      maintainer: packageJSON.author.name + ' <' + packageJSON.author.email + '>',\n      homepage: packageJSON.homepage,\n      icon: 'build/assets/img/main.png',\n      categories: ['AudioVideo', 'Audio'],\n      section: 'sound'\n    };\n\n    var pkgArch = 'i386';\n    if (arch === '64') {\n      pkgArch = prefix === 'rpm' ? 'x86_64' : 'amd64';\n    }\n\n    tool(_lodash2.default.extend({}, defaults, {\n      src: 'dist/' + packageJSON.productName + '-linux-' + (arch === '32' ? 'ia32' : 'x64'),\n      arch: pkgArch\n    }), function (err) {\n      console.log(arch + 'bit ' + prefix + ' package built'); // eslint-disable-line\n      if (err) return done(err);\n      done();\n    });\n  });\n};\n\ngenerateGulpLinuxDistroTask('rpm', 'redhat', '32');\ngenerateGulpLinuxDistroTask('rpm', 'redhat', '64');\ngenerateGulpLinuxDistroTask('deb', 'debian', '32');\ngenerateGulpLinuxDistroTask('deb', 'debian', '64');\n\n_gulp2.default.task('rpm:linux', function (done) {\n  (0, _runSequence2.default)('rpm:linux:32', 'rpm:linux:64', done);\n});\n\n_gulp2.default.task('deb:linux', function (done) {\n  (0, _runSequence2.default)('deb:linux:32', 'deb:linux:64', done);\n});\n\nvar zipTask = function zipTask(makeName, deps, cwd, what) {\n  _gulp2.default.task('make:' + makeName, deps, function (done) {\n    var child = (0, _child_process.spawn)('zip', ['-r', '-y', 'installers.zip', '.'], { cwd: cwd });\n\n    console.log('Zipping ' + what); // eslint-disable-line\n\n    // spit stdout to screen\n    child.stdout.on('data', function () {});\n\n    // Send stderr to the main console\n    child.stderr.on('data', function () {});\n\n    child.on('close', function (code) {\n      console.log('Finished zipping ' + what + ' with code: ' + code); // eslint-disable-line\n      done();\n    });\n  });\n};\n\n_gulp2.default.task('make:linux', function (done) {\n  (0, _runSequence2.default)('deb:linux', 'rpm:linux', 'make:linux:both', done);\n});\n\nzipTask('linux:both', [], './dist/installers', 'all the Linux Installers');\nzipTask('linux:deb', ['deb:linux'], './dist/installers/debian', 'the Debian Packages');\nzipTask('linux:rpm', ['rpm:linux'], './dist/installers/redhat', 'the Redhat (Fedora) Packages');\n\n// The default task (called when you run `gulp` from cli)\n_gulp2.default.task('default', ['watch', 'transpile', 'images']);\n_gulp2.default.task('build', ['transpile', 'images', 'less', 'fonts', 'html', 'locales']);\n_gulp2.default.task('package', ['package:win', 'package:darwin', 'package:linux']);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "paths",
        "internalScripts",
        "html",
        "less",
        "fonts",
        "images",
        "locales",
        "packageJSON",
        "require",
        "version",
        "dependencies",
        "electron",
        "substr",
        "defaultPackageConf",
        "appBundleId",
        "name",
        "appCategoryType",
        "appCopyright",
        "Date",
        "getFullYear",
        "author",
        "appVersion",
        "afterCopy",
        "buildPath",
        "electronVersion",
        "pPlatform",
        "pArch",
        "done",
        "then",
        "catch",
        "files",
        "globber",
        "sync",
        "nodePath",
        "resolve",
        "concat",
        "forEach",
        "fs",
        "unlinkSync",
        "filePath",
        "arch",
        "asar",
        "buildVersion",
        "dir",
        "__dirname",
        "icon",
        "ignore",
        "path",
        "tests",
        "i",
        "length",
        "test",
        "productName",
        "out",
        "overwrite",
        "platform",
        "prune",
        "win32metadata",
        "CompanyName",
        "FileDescription",
        "ProductName",
        "InternalName",
        "winstallerConfig",
        "appDirectory",
        "outputDirectory",
        "authors",
        "exe",
        "description",
        "title",
        "owners",
        "noMsi",
        "certificateFile",
        "certificatePassword",
        "process",
        "env",
        "SIGN_CERT_PASS",
        "iconUrl",
        "setupIcon",
        "loadingGif",
        "GPMDP_DONT_BUILD_DELTAS",
        "remoteReleases",
        "APPVEYOR",
        "appdmgConf",
        "target",
        "basepath",
        "specification",
        "background",
        "window",
        "size",
        "width",
        "height",
        "contents",
        "x",
        "y",
        "type",
        "cleanGlob",
        "glob",
        "allowSkip",
        "GPMDP_SKIP_PACKAGE",
        "gulp",
        "src",
        "read",
        "pipe",
        "force",
        "windowsSignFile",
        "signDigest",
        "Promise",
        "console",
        "log",
        "setTimeout",
        "task",
        "dest",
        "on",
        "err",
        "error",
        "envCall",
        "envKey",
        "closer",
        "apiVersion",
        "toUTCString",
        "watch",
        "_",
        "extend",
        "packageExePath",
        "installerExePath",
        "containerVirtualization",
        "inputDirectory",
        "flatten",
        "packageVersion",
        "packageName",
        "packageDisplayName",
        "packageDescription",
        "packageExecutable",
        "publisher",
        "publisherDisplayName",
        "assets",
        "devCert",
        "signtoolParams",
        "finalSay",
        "manifestPath",
        "manifest",
        "readFileSync",
        "replace",
        "writeFileSync",
        "osxSign",
        "identity",
        "pathEscapedName",
        "child",
        "cwd",
        "stdout",
        "stderr",
        "code",
        "existsSync",
        "dmg",
        "generateGulpLinuxDistroTask",
        "prefix",
        "tool",
        "defaults",
        "bin",
        "depends",
        "maintainer",
        "email",
        "homepage",
        "categories",
        "section",
        "pkgArch",
        "zipTask",
        "makeName",
        "deps",
        "what"
      ],
      "mappings": "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",
      "file": "gulpfile.babel.js",
      "sourceRoot": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-",
      "sourcesContent": [
        "/* eslint arrow-body-style: 0 */\n\nimport gulp from 'gulp';\n\nimport { spawn, exec } from 'child_process';\nimport _ from 'lodash';\nimport babel from 'gulp-babel';\nimport clean from 'gulp-clean';\nimport concat from 'gulp-concat';\nimport cssmin from 'gulp-cssmin';\nimport { createWindowsInstaller as electronInstaller } from 'gpmdp-electron-winstaller';\nimport fs from 'fs';\nimport globber from 'glob';\nimport header from 'gulp-header';\nimport less from 'gulp-less';\nimport packager from 'electron-packager';\nimport nodePath from 'path';\nimport replace from 'gulp-replace';\nimport runSequence from 'run-sequence';\nimport electronWindowsStore from 'electron-windows-store';\n// import uglify from 'gulp-uglify';\nimport rebuild from 'electron-rebuild';\nimport rasterImages from './vendor/svg_raster';\n\nconst paths = {\n  internalScripts: ['src/**/*.js'],\n  html: 'src/public_html/**/*.html',\n  less: 'src/assets/less/**/*.less',\n  fonts: ['node_modules/materialize-css/dist/fonts/**/*',\n          '!node_modules/materialize-css/dist/font/material-design-icons/*',\n          'node_modules/material-design-icons-iconfont/dist/fonts/**/*'],\n  images: ['src/assets/img/**/*', 'src/assets/icons/*'],\n  locales: ['src/_locales/*.json'],\n};\n\nconst packageJSON = require('./package.json');\n\nlet version = packageJSON.dependencies.electron;\nif (version.substr(0, 1) !== '0' && version.substr(0, 1) !== '1' && version.substr(0, 1) !== '2') {\n  version = version.substr(1);\n}\n\nconst defaultPackageConf = {\n  appBundleId: packageJSON.name,\n  appCategoryType: 'public.app-category.music',\n  appCopyright: `Copyright © ${(new Date()).getFullYear()} ${packageJSON.author.name}, All rights reserved.`, // eslint-disable-line\n  appVersion: packageJSON.version,\n  afterCopy: [\n    (buildPath, electronVersion, pPlatform, pArch, done) => rebuild(buildPath, electronVersion, pArch).then(() => done()).catch(done),\n    (buildPath, electronVersion, pPlatform, pArch, done) => {\n      const files = globber.sync(nodePath.resolve(buildPath, '**', '*.pdb'))\n        .concat(globber.sync(nodePath.resolve(buildPath, '**', '*.obj')))\n        .concat(globber.sync(nodePath.resolve(buildPath, '**', '.bin', '**', '*')));\n      files.forEach(filePath => fs.unlinkSync(filePath));\n      done();\n    },\n  ],\n  arch: 'all',\n  asar: true,\n  buildVersion: packageJSON.version,\n  dir: __dirname,\n  icon: './build/assets/img/main',\n  ignore: (path) => {\n    const tests = [\n      // Ignore git directory\n      () => /^\\/\\.git\\/.*/g,\n      // Ignore uwp directory\n      () => /^\\/\\uwp\\/.*/g,\n      // Ignore electron-packager on Docker machines\n      () => /^\\/electron-packager\\//g,\n      // Ignore electron\n      () => /^\\/node_modules\\/electron\\//g,\n      () => /^\\/node_modules\\/electron$/g,\n      // Ignore debug files\n      () => /^\\/node_modules\\/.*\\.pdb/g,\n      // Ignore native module obj files\n      () => /^\\/node_modules\\/.*\\.obj/g,\n      // Ignore optional dev modules\n      () => /^\\/node_modules\\/appdmg/g,\n      () => /^\\/node_modules\\/electron-installer-debian/g,\n      () => /^\\/node_modules\\/electron-installer-redhat/g,\n      // Ignore symlinks in the bin directory\n      () => /^\\/node_modules\\/.bin/g,\n      // Ignore root dev FileDescription\n      () => /^\\/(vendor|dist|sig|docs|src|test|.cert.pfx|.editorconfig|.eslintignore|.eslintrc|.gitignore|.travis.yml|appveyor.yml|circle.yml|CONTRIBUTING.md|Gruntfile.js|gulpfile.js|ISSUE_TEMPLATE.md|LICENSE|README.md)(\\/|$)/g, // eslint-disable-line\n    ];\n    for (let i = 0; i < tests.length; i++) {\n      if (tests[i]().test(path)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  name: packageJSON.productName,\n  out: './dist/',\n  overwrite: true,\n  platform: 'all',\n  prune: true,\n  electronVersion: version,\n  win32metadata: {\n    CompanyName: packageJSON.author.name,\n    FileDescription: packageJSON.productName,\n    ProductName: packageJSON.productName,\n    InternalName: packageJSON.productName,\n  },\n};\n\nconst winstallerConfig = {\n  appDirectory: `dist/${packageJSON.productName}-win32-ia32`,\n  outputDirectory: 'dist/installers/win32',\n  authors: packageJSON.author.name,\n  exe: `${packageJSON.productName}.exe`,\n  description: packageJSON.productName,\n  title: packageJSON.productName,\n  owners: packageJSON.author.name,\n  name: 'GPMDP_3',\n  noMsi: true,\n  certificateFile: '.cert.pfx',\n  certificatePassword: process.env.SIGN_CERT_PASS,\n  // DEV: When in master we should change this to point to github raw url\n  iconUrl: 'https://www.samuelattard.com/img/gpmdp_setup.ico',\n  setupIcon: 'build/assets/img/main.ico',\n  loadingGif: 'build/assets/img/installing.gif',\n};\n\nif (!process.env.GPMDP_DONT_BUILD_DELTAS) {\n  winstallerConfig.remoteReleases = 'https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-';\n}\n\nif (process.env.APPVEYOR) {\n  delete winstallerConfig.remoteReleases;\n}\n\nconst appdmgConf = {\n  target: `dist/${packageJSON.productName}-darwin-x64/${packageJSON.productName}.dmg`,\n  basepath: __dirname,\n  specification: {\n    title: 'GPMDP',\n    icon: `${defaultPackageConf.icon}.icns`,\n    background: 'src/assets/img/dmg.png',\n    window: {\n      size: {\n        width: 600,\n        height: 400,\n      },\n    },\n    contents: [\n      {\n        x: 490, y: 252, type: 'link', path: '/Applications',\n      },\n      {\n        x: 106, y: 252, type: 'file', path: `dist/${packageJSON.productName}-darwin-x64/${packageJSON.productName}.app`,\n      },\n    ],\n  },\n};\n\nconst cleanGlob = (glob, allowSkip) => {\n  if (allowSkip && process.env.GPMDP_SKIP_PACKAGE) return;\n  return () => {\n    return gulp.src(glob, { read: false })\n      .pipe(clean({ force: true }));\n  };\n};\n\nconst windowsSignFile = (filePath, signDigest) =>\n  new Promise((resolve) => {\n    console.log(`Signing file: \"${filePath}\"\\nWith digest: ${signDigest}`);\n    exec(\n      `vendor\\\\signtool sign /f \".cert.pfx\" /p ${process.env.SIGN_CERT_PASS} /td ${signDigest} /fd ${signDigest} /tr \"http://timestamp.digicert.com\" /v /as \"${filePath}\"`,\n      {},\n      () => {\n        setTimeout(() => {\n          setTimeout(resolve, 500);\n        });\n      }\n    );\n  });\n\ngulp.task('clean', cleanGlob(['./build', './dist']));\ngulp.task('clean-dist-win', cleanGlob(`./dist/${packageJSON.productName}-win32-ia32`));\ngulp.task('clean-dist-darwin', cleanGlob(`./dist/${packageJSON.productName}-darwin-ia32`));\ngulp.task('clean-dist-linux-32', cleanGlob(`./dist/${packageJSON.productName}-linux-ia32`, true));\ngulp.task('clean-dist-linux-64', cleanGlob(`./dist/${packageJSON.productName}-linux-x64`, true));\ngulp.task('clean-html', cleanGlob('./build/public_html'));\ngulp.task('clean-internal', cleanGlob(['./build/*.js', './build/**/*.js', '!./build/assets/**/*']));\ngulp.task('clean-fonts', cleanGlob('./build/assets/fonts'));\ngulp.task('clean-less', cleanGlob('./build/assets/css'));\ngulp.task('clean-images', cleanGlob('./build/assets/img'));\ngulp.task('clean-locales', cleanGlob('./build/_locales/*.json'));\n\ngulp.task('html', ['clean-html'], () => {\n  return gulp.src(paths.html)\n    .pipe(gulp.dest('./build/public_html'));\n});\n\ngulp.task('transpile', ['clean-internal'], () => {\n  return gulp.src(paths.internalScripts)\n    .pipe(babel())\n    .on('error', (err) => { console.error(err); }) // eslint-disable-line\n    .pipe(replace(/process\\.env\\.([a-zA-Z_]+)?( |,|;|\\))/gi, (envCall, envKey, closer) => {\n      return `'${process.env[envKey]}'${closer}`;\n    }))\n    .pipe(gulp.dest('./build/'));\n});\n\ngulp.task('locales', ['clean-locales'], () => {\n  return gulp.src(paths.locales)\n    .pipe(gulp.dest('./build/_locales'));\n});\n\ngulp.task('fonts', ['clean-fonts'], () => {\n  return gulp.src(paths.fonts)\n    .pipe(gulp.dest('./build/assets/fonts'));\n});\n\ngulp.task('less', ['clean-less'], () => {\n  return gulp.src(paths.less)\n    .pipe(less())\n    .on('error', (err) => { console.error(err); }) // eslint-disable-line\n    .pipe(cssmin())\n    .pipe(concat('core.css'))\n    .pipe(gulp.dest('./build/assets/css'));\n});\n\n// Copy all static images\ngulp.task('copy-static-images', ['clean-images'], () => {\n  return gulp.src(paths.images)\n    .pipe(gulp.dest('./build/assets/img/'));\n});\n\ngulp.task('images', ['copy-static-images'], (done) => {\n  rasterImages(done);\n});\n\ngulp.task('build-release', ['build'], () => {\n  return gulp.src('./build/**/*.js')\n    // .pipe(uglify())\n    .pipe(header(\n`/*!\n${packageJSON.productName}\nVersion: v${packageJSON.version}\nAPI Version: v${packageJSON.apiVersion}\nCompiled: ${new Date().toUTCString()}\nCopyright (C) ${(new Date()).getFullYear()} ${packageJSON.author.name}\nThis software may be modified and distributed under the terms of the MIT license.\n */\\n`\n    ))\n    .pipe(gulp.dest('./build'));\n});\n\n// Rerun the task when a file changes\ngulp.task('watch', ['build'], () => {\n  gulp.watch(paths.internalScripts, ['transpile']);\n  gulp.watch(paths.html, ['html']);\n  gulp.watch(paths.images, ['images']);\n  gulp.watch(paths.less, ['less']);\n  gulp.watch(paths.locales, ['locales']);\n});\n\ngulp.task('package:win', ['clean-dist-win', 'build-release'], (done) => {\n  packager(_.extend({}, defaultPackageConf, { platform: 'win32', arch: 'ia32' }), (err) => {\n    if (err) return done(err);\n    setTimeout(() => {\n      const packageExePath = `dist/${packageJSON.productName}-win32-ia32/${packageJSON.productName}.exe`;\n      windowsSignFile(packageExePath, 'sha1')\n      .then(() => windowsSignFile(packageExePath, 'sha256'))\n      .then(() => done());\n    }, 1000);\n  });\n});\n\ngulp.task('make:win', ['package:win'], (done) => {\n  electronInstaller(winstallerConfig)\n    .then(() => {\n      const installerExePath = `dist/installers/win32/${packageJSON.productName}Setup.exe`;\n      windowsSignFile(installerExePath, 'sha1')\n      .then(() => windowsSignFile(installerExePath, 'sha256'))\n      .then(() => done());\n    })\n    .catch((err) => done(err));\n});\n\ngulp.task('make:win:uwp', ['package:win'], (done) => {\n  electronWindowsStore({\n    containerVirtualization: false,\n    inputDirectory: nodePath.resolve(__dirname, `dist/${packageJSON.productName}-win32-ia32`),\n    outputDirectory: nodePath.resolve(__dirname, 'dist/uwp'),\n    flatten: true,\n    packageVersion: `${packageJSON.version}.0`,\n    packageName: 'GPMDP',\n    packageDisplayName: 'GPMDP',\n    packageDescription: packageJSON.description,\n    packageExecutable: `app\\\\${packageJSON.productName}.exe`,\n    publisher: 'CN=E800FCD7-1562-414E-A4AC-F1BA78F4A060',\n    publisherDisplayName: 'Samuel Attard',\n    assets: 'build\\\\assets\\\\img\\\\assets',\n    devCert: nodePath.resolve(__dirname, '.uwp.pfx'),\n    signtoolParams: ['/p', process.env.SIGN_CERT_PASS],\n    finalSay: () => new Promise((resolve) => {\n      const manifestPath = nodePath.resolve(__dirname, 'dist/uwp/pre-appx/appxmanifest.xml');\n      const manifest = fs.readFileSync(manifestPath, 'utf8').replace('<Identity Name=\"GPMDP\"', '<Identity Name=\"24619SamuelAttard.GPMDP\"');\n      fs.writeFileSync(manifestPath, manifest);\n      resolve();\n    }),\n  }).then(() => done()).catch(done);\n});\n\ngulp.task('package:darwin', ['clean-dist-darwin', 'build-release'], (done) => {\n  packager(_.extend({}, defaultPackageConf, { platform: 'darwin', osxSign: { identity: 'Developer ID Application: Samuel Attard (S7WPQ45ZU2)' } }), done); // eslint-disable-line\n});\n\ngulp.task('make:darwin', ['package:darwin'], (done) => {\n  const pathEscapedName = packageJSON.productName.replace(/ /gi, ' ');\n  const child = spawn('zip', ['-r', '-y', `${pathEscapedName}.zip`, `${pathEscapedName}.app`],\n    {\n      cwd: `./dist/${packageJSON.productName}-darwin-x64`,\n    });\n\n  console.log(`Zipping \"${packageJSON.productName}.app\"`); // eslint-disable-line\n\n  child.stdout.on('data', () => {});\n\n  child.stderr.on('data', () => {});\n\n  child.on('close', (code) => {\n    console.log('Finished zipping with code ' + code); // eslint-disable-line\n\n    done();\n  });\n});\n\ngulp.task('dmg:darwin', ['package:darwin'], (done) => {\n  if (fs.existsSync(nodePath.resolve(__dirname, appdmgConf.target))) {\n    fs.unlinkSync(nodePath.resolve(__dirname, appdmgConf.target));\n  }\n  const dmg = require('appdmg')(appdmgConf);\n\n  dmg.on('finish', () => done());\n  dmg.on('error', done);\n});\n\ngulp.task('package:linux:32', ['clean-dist-linux-32', 'build-release'], (done) => {\n  if (process.env.GPMDP_SKIP_PACKAGE) return done();\n  packager(_.extend({}, defaultPackageConf, { platform: 'linux', arch: 'ia32' }), done);\n});\n\ngulp.task('package:linux:64', ['clean-dist-linux-64', 'build-release'], (done) => {\n  if (process.env.GPMDP_SKIP_PACKAGE) return done();\n  packager(_.extend({}, defaultPackageConf, { platform: 'linux', arch: 'x64' }), done);\n});\n\ngulp.task('package:linux', (done) => {\n  runSequence('package:linux:32', 'package:linux:64', done);\n});\n\nconst generateGulpLinuxDistroTask = (prefix, name, arch) => {\n  gulp.task(`${prefix}:linux:${arch}`, [`package:linux:${arch}`], (done) => {\n    const tool = require(`electron-installer-${name}`);\n\n    const defaults = {\n      bin: packageJSON.productName,\n      dest: `dist/installers/${name}`,\n      depends: ['libappindicator1', 'avahi-daemon'],\n      maintainer: `${packageJSON.author.name} <${packageJSON.author.email}>`,\n      homepage: packageJSON.homepage,\n      icon: 'build/assets/img/main.png',\n      categories: ['AudioVideo', 'Audio'],\n      section: 'sound',\n    };\n\n    let pkgArch = 'i386';\n    if (arch === '64') {\n      pkgArch = (prefix === 'rpm' ? 'x86_64' : 'amd64');\n    }\n\n    tool(_.extend({}, defaults, {\n      src: `dist/${packageJSON.productName}-linux-${arch === '32' ? 'ia32' : 'x64'}`,\n      arch: pkgArch,\n    }), (err) => {\n      console.log(`${arch}bit ${prefix} package built`); // eslint-disable-line\n      if (err) return done(err);\n      done();\n    });\n  });\n};\n\ngenerateGulpLinuxDistroTask('rpm', 'redhat', '32');\ngenerateGulpLinuxDistroTask('rpm', 'redhat', '64');\ngenerateGulpLinuxDistroTask('deb', 'debian', '32');\ngenerateGulpLinuxDistroTask('deb', 'debian', '64');\n\ngulp.task('rpm:linux', (done) => {\n  runSequence('rpm:linux:32', 'rpm:linux:64', done);\n});\n\ngulp.task('deb:linux', (done) => {\n  runSequence('deb:linux:32', 'deb:linux:64', done);\n});\n\nconst zipTask = (makeName, deps, cwd, what) => {\n  gulp.task(`make:${makeName}`, deps, (done) => {\n    const child = spawn('zip', ['-r', '-y', 'installers.zip', '.'], { cwd });\n\n    console.log(`Zipping ${what}`); // eslint-disable-line\n\n    // spit stdout to screen\n    child.stdout.on('data', () => {});\n\n    // Send stderr to the main console\n    child.stderr.on('data', () => {});\n\n    child.on('close', (code) => {\n      console.log(`Finished zipping ${what} with code: ${code}`); // eslint-disable-line\n      done();\n    });\n  });\n};\n\ngulp.task('make:linux', (done) => {\n  runSequence('deb:linux', 'rpm:linux', 'make:linux:both', done);\n});\n\nzipTask('linux:both', [], './dist/installers', 'all the Linux Installers');\nzipTask('linux:deb', ['deb:linux'], './dist/installers/debian', 'the Debian Packages');\nzipTask('linux:rpm', ['rpm:linux'], './dist/installers/redhat', 'the Redhat (Fedora) Packages');\n\n// The default task (called when you run `gulp` from cli)\ngulp.task('default', ['watch', 'transpile', 'images']);\ngulp.task('build', ['transpile', 'images', 'less', 'fonts', 'html', 'locales']);\ngulp.task('package', ['package:win', 'package:darwin', 'package:linux']);\n"
      ]
    },
    "mtime": 1548611353837
  },
  "{\"filename\":\"/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor/svg_raster.js\",\"env\":{\"development\":{\"plugins\":[]}},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"loose\":false,\"spec\":false}],[[],null],[[],null],[[],{\"spec\":false}],[[],null],[[],{\"loose\":false}],[[],null],[[],null],[[],null],[[],{\"loose\":false}],[[],{\"loose\":false}],[[],null],[[],null],[[],null],[[],{\"loose\":false}],[[],null],[[],{\"loose\":false}],[[],null],[[],null],[[],{\"loose\":false}],[[],{\"async\":false,\"asyncGenerators\":false}]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.26.3": {
    "metadata": {
      "usedHelpers": [],
      "marked": [],
      "modules": {
        "imports": [],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor/svg_raster.js",
      "filenameRelative": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor/svg_raster.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false,
            "spec": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "spec": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "async": false,
            "asyncGenerators": false
          }
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "svg_raster.js",
      "sourceFileName": "svg_raster.js",
      "sourceRoot": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "svg_raster"
    },
    "ignored": false,
    "code": "'use strict'; // eslint-disable-line\n\nvar fs = require('pn/fs');\nvar Jimp = require('jimp');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar svg2png = require('svg2png');\n\nvar basePath = path.resolve(__dirname, '..', 'src/assets/icons/svg');\nvar targetPath = path.resolve(__dirname, '..', 'build/assets/img');\n\nmkdirp.sync(basePath);\nmkdirp.sync(targetPath);\n\nvar fileMappings = {\n  vector_logo: [{ name: 'main', width: 1024, height: 1024 }, { name: 'assets/SampleAppx.44x44', width: 44, height: 44 }, { name: 'assets/SampleAppx.50x50', width: 50, height: 50 }, { name: 'assets/SampleAppx.150x150', width: 150, height: 150 }, { name: 'assets/SampleAppx.310x310', width: 310, height: 310 }, { name: 'assets/SampleAppx.310x150', width: 310, height: 150 }],\n  vector_logo_tray: [{ name: 'main_tray', width: 1024, height: 1024 }, { name: 'main_tray_s', width: 128, height: 128 }],\n  vector_logo_tray_transparent: [{ name: 'main_tray_transparent_s', width: 128, height: 128 }]\n};\n\nvar types = [null, 'playing', 'paused'];\n\nmodule.exports = function (cb) {\n  var i = 0;\n  var counter = 0;\n  var doIcons = function doIcons() {\n    i++;\n    if (i === 15) {\n      var jimpOutFiles = ['main_tray_black_s', 'main_tray_white_s', 'macTemplate@5x', 'macTemplate@2x', 'macTemplate'];\n\n      var done = function done() {\n        counter++;\n        if (counter === 16) return cb();\n      };\n\n      // Generate ico and icns files\n      done();\n\n      types.forEach(function (type) {\n        var typeTargetPath = type ? path.resolve(targetPath, type) : targetPath;\n        var srcJimpFile = path.resolve(targetPath, 'main_tray_transparent_s.png');\n        if (type) {\n          srcJimpFile = path.resolve(targetPath, type, 'main_tray_transparent_s.png');\n        }\n\n        // Generate white and macOS images\n        jimpOutFiles.forEach(function (outFileName) {\n          Jimp.read(srcJimpFile, function (err, lenna) {\n            if (err) throw err;\n            var brightness = /black/g.test(outFileName) ? -1 : 1;\n            var image = lenna[/mac/g.test(outFileName) ? 'greyscale' : 'brightness'](/mac/g.test(outFileName) ? undefined : brightness);\n            if (/mac/g.test(outFileName)) {\n              if (/@2x/g.test(outFileName)) {\n                image.resize(38, 38);\n              } else if (/@5x/g.test(outFileName)) {\n                image.resize(95, 95);\n              } else {\n                image.resize(19, 19);\n              }\n            }\n            image.write(path.resolve(typeTargetPath, outFileName + '.png'), done);\n          });\n        });\n      });\n    }\n  };\n  // Generate all dem tray icons\n  types.forEach(function (type) {\n    var typeTargetPath = type ? path.resolve(targetPath, type) : targetPath;\n    mkdirp.sync(typeTargetPath);\n\n    Object.keys(fileMappings).forEach(function (srcFile) {\n      fileMappings[srcFile].forEach(function (targetFile) {\n        var filePath = path.resolve(basePath, '' + srcFile + (type ? '_' + type : '') + '.svg');\n        if (!fs.existsSync(filePath)) return;\n        fs.readFile(filePath).then(function (src) {\n          return svg2png(src, { width: targetFile.width, height: targetFile.height });\n        }).then(function (buffer) {\n          mkdirp.sync(path.dirname(path.resolve(typeTargetPath, targetFile.name + '.png')));\n          return fs.writeFile(path.resolve(typeTargetPath, targetFile.name + '.png'), buffer);\n        }).then(doIcons.bind(undefined, type, typeTargetPath)).catch(function (e) {\n          return console.error(e);\n        });\n      });\n    });\n  });\n};\n\nif (process.argv.some(function (arg) {\n  return arg === '--instant';\n})) {\n  module.exports(function () {\n    return console.log('Generated Images');\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "svg_raster.js"
      ],
      "names": [
        "fs",
        "require",
        "Jimp",
        "mkdirp",
        "path",
        "svg2png",
        "basePath",
        "resolve",
        "__dirname",
        "targetPath",
        "sync",
        "fileMappings",
        "vector_logo",
        "name",
        "width",
        "height",
        "vector_logo_tray",
        "vector_logo_tray_transparent",
        "types",
        "module",
        "exports",
        "cb",
        "i",
        "counter",
        "doIcons",
        "jimpOutFiles",
        "done",
        "forEach",
        "type",
        "typeTargetPath",
        "srcJimpFile",
        "outFileName",
        "read",
        "err",
        "lenna",
        "brightness",
        "test",
        "image",
        "undefined",
        "resize",
        "write",
        "Object",
        "keys",
        "srcFile",
        "targetFile",
        "filePath",
        "existsSync",
        "readFile",
        "then",
        "src",
        "dirname",
        "writeFile",
        "buffer",
        "bind",
        "catch",
        "console",
        "error",
        "e",
        "process",
        "argv",
        "some",
        "arg",
        "log"
      ],
      "mappings": "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",
      "file": "svg_raster.js",
      "sourceRoot": "/tmp/gpmdp-git/src/Google-Play-Music-Desktop-Player-UNOFFICIAL-/vendor",
      "sourcesContent": [
        "'use strict'; // eslint-disable-line\n\nconst fs = require('pn/fs');\nconst Jimp = require('jimp');\nconst mkdirp = require('mkdirp');\nconst path = require('path');\nconst svg2png = require('svg2png');\n\nconst basePath = path.resolve(__dirname, '..', 'src/assets/icons/svg');\nconst targetPath = path.resolve(__dirname, '..', 'build/assets/img');\n\nmkdirp.sync(basePath);\nmkdirp.sync(targetPath);\n\nconst fileMappings = {\n  vector_logo: [{ name: 'main', width: 1024, height: 1024 }, { name: 'assets/SampleAppx.44x44', width: 44, height: 44 },\n                { name: 'assets/SampleAppx.50x50', width: 50, height: 50 }, { name: 'assets/SampleAppx.150x150', width: 150, height: 150 },\n                { name: 'assets/SampleAppx.310x310', width: 310, height: 310 }, { name: 'assets/SampleAppx.310x150', width: 310, height: 150 }],\n  vector_logo_tray: [{ name: 'main_tray', width: 1024, height: 1024 }, { name: 'main_tray_s', width: 128, height: 128 }],\n  vector_logo_tray_transparent: [{ name: 'main_tray_transparent_s', width: 128, height: 128 }],\n};\n\nconst types = [null, 'playing', 'paused'];\n\nmodule.exports = (cb) => {\n  let i = 0;\n  let counter = 0;\n  const doIcons = () => {\n    i++;\n    if (i === 15) {\n      const jimpOutFiles = ['main_tray_black_s', 'main_tray_white_s', 'macTemplate@5x', 'macTemplate@2x', 'macTemplate'];\n\n      const done = () => {\n        counter++;\n        if (counter === 16) return cb();\n      };\n\n      // Generate ico and icns files\n      done();\n\n      types.forEach((type) => {\n        const typeTargetPath = type ? path.resolve(targetPath, type) : targetPath;\n        let srcJimpFile = path.resolve(targetPath, 'main_tray_transparent_s.png');\n        if (type) {\n          srcJimpFile = path.resolve(targetPath, type, 'main_tray_transparent_s.png');\n        }\n\n        // Generate white and macOS images\n        jimpOutFiles.forEach((outFileName) => {\n          Jimp.read(srcJimpFile, (err, lenna) => {\n            if (err) throw err;\n            const brightness = (/black/g.test(outFileName)) ? -1 : 1;\n            const image = lenna[/mac/g.test(outFileName) ? 'greyscale' : 'brightness'](/mac/g.test(outFileName) ? undefined : brightness);\n            if (/mac/g.test(outFileName)) {\n              if (/@2x/g.test(outFileName)) {\n                image.resize(38, 38);\n              } else if (/@5x/g.test(outFileName)) {\n                image.resize(95, 95);\n              } else {\n                image.resize(19, 19);\n              }\n            }\n            image.write(path.resolve(typeTargetPath, `${outFileName}.png`), done);\n          });\n        });\n      });\n    }\n  };\n  // Generate all dem tray icons\n  types.forEach((type) => {\n    const typeTargetPath = type ? path.resolve(targetPath, type) : targetPath;\n    mkdirp.sync(typeTargetPath);\n\n    Object.keys(fileMappings).forEach((srcFile) => {\n      fileMappings[srcFile].forEach((targetFile) => {\n        const filePath = path.resolve(basePath, `${srcFile}${type ? `_${type}` : ''}.svg`);\n        if (!fs.existsSync(filePath)) return;\n        fs.readFile(filePath)\n            .then((src) => svg2png(src, { width: targetFile.width, height: targetFile.height }))\n            .then(buffer => {\n              mkdirp.sync(path.dirname(path.resolve(typeTargetPath, `${targetFile.name}.png`)));\n              return fs.writeFile(path.resolve(typeTargetPath, `${targetFile.name}.png`), buffer);\n            })\n            .then(doIcons.bind(this, type, typeTargetPath))\n            .catch(e => console.error(e));\n      });\n    });\n  });\n};\n\nif (process.argv.some(arg => arg === '--instant')) {\n  module.exports(() => console.log('Generated Images'));\n}\n"
      ]
    },
    "mtime": 1548611353853
  }
}